<?php

namespace ContainerQnI309x;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManagerGhostC7f04bd', fn () => \EntityManagerGhostC7f04bd::createLazyGhost(fn ($proxy) => self::do($container, $proxy)));
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $b->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 4).'/src/Entity')]), 'App\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity']);
        $a->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $a->setQueryCache(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $a->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService')));
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setSchemaIgnoreClasses([]);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setLazyGhostObjectEnabled(true);
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\BrandRepository' => ['privates', 'App\\Repository\\BrandRepository', 'getBrandRepositoryService', true],
            'App\\Repository\\CartItemRepository' => ['privates', 'App\\Repository\\CartItemRepository', 'getCartItemRepositoryService', true],
            'App\\Repository\\CartRepository' => ['privates', 'App\\Repository\\CartRepository', 'getCartRepositoryService', true],
            'App\\Repository\\CategoryRepository' => ['privates', 'App\\Repository\\CategoryRepository', 'getCategoryRepositoryService', true],
            'App\\Repository\\DiscountRepository' => ['privates', 'App\\Repository\\DiscountRepository', 'getDiscountRepositoryService', true],
            'App\\Repository\\FactureRepository' => ['privates', 'App\\Repository\\FactureRepository', 'getFactureRepositoryService', true],
            'App\\Repository\\FeatureRepository' => ['privates', 'App\\Repository\\FeatureRepository', 'getFeatureRepositoryService', true],
            'App\\Repository\\HeroRepository' => ['privates', 'App\\Repository\\HeroRepository', 'getHeroRepositoryService', true],
            'App\\Repository\\ImageRepository' => ['privates', 'App\\Repository\\ImageRepository', 'getImageRepositoryService', true],
            'App\\Repository\\ProductOptionRepository' => ['privates', 'App\\Repository\\ProductOptionRepository', 'getProductOptionRepositoryService', true],
            'App\\Repository\\ProductOptionValueRepository' => ['privates', 'App\\Repository\\ProductOptionValueRepository', 'getProductOptionValueRepositoryService', true],
            'App\\Repository\\ProductRepository' => ['privates', 'App\\Repository\\ProductRepository', 'getProductRepositoryService', true],
            'App\\Repository\\ProductVariantOptionRepository' => ['privates', 'App\\Repository\\ProductVariantOptionRepository', 'getProductVariantOptionRepositoryService', true],
            'App\\Repository\\ProductVariantRepository' => ['privates', 'App\\Repository\\ProductVariantRepository', 'getProductVariantRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
        ], [
            'App\\Repository\\BrandRepository' => '?',
            'App\\Repository\\CartItemRepository' => '?',
            'App\\Repository\\CartRepository' => '?',
            'App\\Repository\\CategoryRepository' => '?',
            'App\\Repository\\DiscountRepository' => '?',
            'App\\Repository\\FactureRepository' => '?',
            'App\\Repository\\FeatureRepository' => '?',
            'App\\Repository\\HeroRepository' => '?',
            'App\\Repository\\ImageRepository' => '?',
            'App\\Repository\\ProductOptionRepository' => '?',
            'App\\Repository\\ProductOptionValueRepository' => '?',
            'App\\Repository\\ProductRepository' => '?',
            'App\\Repository\\ProductVariantOptionRepository' => '?',
            'App\\Repository\\ProductVariantRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
        ])));

        $instance = ($lazyLoad->__construct(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a) && false ?: $lazyLoad);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
